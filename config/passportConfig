const mongoose = require('mongoose');
const User = require('../models/user');
const bcrypt = require('bcryptjs');
const app = require('../index');
const localStrategy = require('passport-local').Strategy;
const GoogleStrategy = require('passport-google-oauth20').Strategy;

module.exports = (passport) => {
  passport.use(
    new GoogleStrategy(
      {
        clientID: process.env.googleClientID,
        clientSecret: process.env.googleClientSecret,
        callbackURL: '/auth/google/callback',
        // proxy: true is necessary for heroku
        proxy: true
      },
      async (accessToken, refreshToken, profile, done) => {
        try {
          const existingUser = await User.findOne({ googleId: profile.id });
          if (existingUser) {
            // Already have a record with the given profile ID
            return done(null, existingUser);
          }
          // Else, create and save a new user
          const newUser = await new User({ googleId: profile.id });
          await newUser.save();
          done(null, newUser);
        } catch (e) {
          console.log('Error: ', e);
        }
      }
    )
  );

  passport.use(
    'local',
    new localStrategy((username, password, done) => {
      User.findOne({ username: username }, (err, user) => {
        if (err) throw err;
        if (!user) return done(null, false);
        bcrypt.compare(password, user.password, (err, result) => {
          if (err) throw err;
          if (result === true) {
            return done(null, user);
          } else {
            return done(null, false);
          }
        });
      });
    })
  );

  passport.serializeUser((user, cb) => {
    cb(null, { id: user.id });
  });

  passport.deserializeUser((data, cb) => {
    User.findById(data.id).then((user) => {
      cb(null, user);
    });
  });
};
